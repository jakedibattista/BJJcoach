name: Deploy to Cloud Run

# Trigger new run after secrets update
on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: bjjcoach-454315
  REGION: us-central1
  SERVICE_NAME: bjj-coach
  BUCKET_NAME: bjjcoach-files

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_SA_EMAIL }}
        audience: sts.googleapis.com

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure gcloud CLI
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set run/region ${{ env.REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker gcr.io --quiet

    - name: Build and Push Container
      run: |-
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} .
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}

    - name: Enable Required APIs
      run: |
        echo "Enabling Secret Manager API..."
        gcloud services enable secretmanager.googleapis.com || {
          echo "Failed to enable Secret Manager API. Please check if you have the necessary permissions."
          echo "You may need to enable it manually at: https://console.cloud.google.com/apis/library/secretmanager.googleapis.com?project=${{ env.PROJECT_ID }}"
          exit 1
        }
        
        echo "Waiting for API to be ready..."
        for i in {1..6}; do
          if gcloud services list --enabled | grep -q secretmanager.googleapis.com; then
            echo "Secret Manager API is enabled and ready"
            break
          fi
          echo "Waiting for API to be ready... (attempt $i/6)"
          sleep 10
        done

    - name: Create or Update Cloud Run Secrets
      run: |
        # Function to create/update secret with error handling
        create_secret() {
          local SECRET_NAME=$1
          local SECRET_VALUE=$2
          local MAX_RETRIES=3
          local RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if ! gcloud secrets describe $SECRET_NAME 2>/dev/null; then
              echo "Creating secret $SECRET_NAME..."
              if printf "%s" "$SECRET_VALUE" | gcloud secrets create $SECRET_NAME --data-file=- --replication-policy="automatic"; then
                echo "✓ Created secret $SECRET_NAME"
                return 0
              fi
            else
              echo "Updating secret $SECRET_NAME..."
              if printf "%s" "$SECRET_VALUE" | gcloud secrets versions add $SECRET_NAME --data-file=-; then
                echo "✓ Updated secret $SECRET_NAME"
                return 0
              fi
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Retrying in 10 seconds... (Attempt $RETRY_COUNT of $MAX_RETRIES)"
              sleep 10
            fi
          done
          
          echo "Failed to create/update secret $SECRET_NAME after $MAX_RETRIES attempts"
          return 1
        }
        
        # Create/update all secrets
        echo "Setting up secrets..."
        create_secret "youtube-api-key" "${{ secrets.YOUTUBE_API_KEY }}" || exit 1
        create_secret "jwt-secret" "${{ secrets.JWT_SECRET }}" || exit 1
        create_secret "db-host" "${{ secrets.DB_HOST }}" || exit 1
        create_secret "db-port" "${{ secrets.DB_PORT }}" || exit 1
        create_secret "db-name" "${{ secrets.DB_NAME }}" || exit 1
        create_secret "db-user" "${{ secrets.DB_USER }}" || exit 1
        create_secret "db-password" "${{ secrets.DB_PASSWORD }}" || exit 1
        
        echo "✓ All secrets created/updated successfully"

    - name: Deploy to Cloud Run
      run: |
        gcloud run services replace cloud-run-instant-deploy-main/service.yaml \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }}

    - name: Make Cloud Run service public
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker" 