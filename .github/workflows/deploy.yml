name: Deploy to Cloud Run

# Trigger new run after secrets update
on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: bjjcoach-454315
  REGION: us-central1
  SERVICE_NAME: bjj-coach
  BUCKET_NAME: bjjcoach-files

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
        service_account: ${{ secrets.GCP_SA_EMAIL }}
        audience: sts.googleapis.com

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure gcloud CLI
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set run/region ${{ env.REGION }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Docker for GCP
      run: |
        gcloud auth configure-docker gcr.io --quiet

    - name: Build and Push Container
      run: |-
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} .
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}

    - name: Create or Update Cloud Run Secrets
      run: |
        # Function to create/update secret
        create_secret() {
          local SECRET_NAME=$1
          local SECRET_VALUE=$2
          
          # Check if secret exists
          if ! gcloud secrets describe $SECRET_NAME 2>/dev/null; then
            printf "%s" "$SECRET_VALUE" | gcloud secrets create $SECRET_NAME --data-file=-
          else
            printf "%s" "$SECRET_VALUE" | gcloud secrets versions add $SECRET_NAME --data-file=-
          fi
        }
        
        # Create/update all secrets
        create_secret "youtube-api-key" "${{ secrets.YOUTUBE_API_KEY }}"
        create_secret "jwt-secret" "${{ secrets.JWT_SECRET }}"
        create_secret "db-host" "${{ secrets.DB_HOST }}"
        create_secret "db-port" "${{ secrets.DB_PORT }}"
        create_secret "db-name" "${{ secrets.DB_NAME }}"
        create_secret "db-user" "${{ secrets.DB_USER }}"
        create_secret "db-password" "${{ secrets.DB_PASSWORD }}"

    - name: Deploy to Cloud Run
      run: |
        gcloud run services replace cloud-run-instant-deploy-main/service.yaml \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }}

    - name: Make Cloud Run service public
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="allUsers" \
          --role="roles/run.invoker" 